import random
import numpy as np

def score_game(game_core):
    '''Запускаем игру 1000 раз, чтобы узнать, как быстро игра угадывает число'''
    count_ls = []
    np.random.seed(42)  # фиксируем RANDOM SEED, чтобы ваш эксперимент был воспроизводим!
    random_array = np.random.randint(1,101, size=(1000))
    for number in random_array:
        count_ls.append(game_core(number))
    score = int(np.mean(count_ls))
    print(f"Ваш алгоритм угадывает число в среднем за {score} попыток")
    return(score)


def game4(number):
    '''Метод через бинарный поиск'''
    trials = 1
    predicted = np.random.randint(1,101) 
    while number != predicted:
        trials += 1
        median = (predict + number) / 2 # находим среднее число

        if predict > number: # проверяем 
            predict = int(round(median)) - 2 ##округляем чтобы не уйти в бесконечные дроби и вычитаем два для быстрого поиска

        elif predict < number: # проверяем опять если стало меньше
            predict = int(round(median)) + 1 ## округляем и прибавляем 1 чтобы выйти на нужное нам число

    return(trials) # выход из цикла, если угадали
    
    
def game3(number):
    trials = 1
    predicted = np.random.randint(1,101)
    while number != predicted:
        trials += 1 # Засчитываем ход
        
        if number % 2 == 0 and predicted % 2 == 0: # проверяем числа на кратность двум
            if number > predicted:
                number -= 2
            elif number < predicted:
                number += 2
        elif number % 3 == 0 and predicted % 3 == 0: # проверяем числа на кратность трем
            if number > predicted:
                number -= 3
            elif number < predicted:
                number += 3
        elif number % 5 == 0 and predicted % 5 == 0: # проверяем числа на кратность пяти
            if number > predicted:
                number -= 5
            elif number < predicted:
                number += 5
        else:
            if number > predicted:
                number -= 1
            elif number < predicted:
                number += 1
    return(trials)
    
    
def game_5(number):
    '''Поиск через бинарную сортировку: 
    Задача состоит в том чтобы создать алгоритм который будет сужать рамки поиска, и как можно быстрее найдёт середину'''
    trials = 1 # Создаём счетчик
    
    bot, top = 0, 101   # задаём границы
    predict = (bot + top) // 2 # вместо случайного номера, начнем с середины
    while predict != number:  # сердце цикла, проверяем если угадали
        trials += 1 # плюсуем счётчик
        predict = (bot + top) // 2  # находим новую медиану
        
        if predict == number: # Угадали!
            return predict

        elif predict < number: ## Задаём новую нижнюю границу если угадываемый номер больше
            predict += 1
            bot = predict
        elif predict > number:## Задаём новую верхнюю границу если угадываемый номер меньше
            predict -= 1
            top = predict
            
    return(trials)

print(score_game(game_5))
